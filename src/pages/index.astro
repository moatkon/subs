---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const subscriptions = await getCollection('subscriptions');
---

<Layout title="Moatkon's Sub">
  {subscriptions.length === 0 ? (
    <div class="text-center py-16">
      <div class="glass-container max-w-2xl mx-auto p-12">
        <div class="w-24 h-24 bg-gradient-to-br from-liquid-primary to-liquid-secondary rounded-3xl flex items-center justify-center mx-auto mb-8 shadow-liquid">
          <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
        </div>
        <h3 class="text-2xl font-bold gradient-text mb-4">开始管理您的订阅</h3>
        <p class="text-gray-600 mb-8">添加您的第一个订阅服务，开始优雅地管理您的数字生活</p>
        <button class="liquid-btn">
          <span>添加订阅</span>
        </button>
      </div>
    </div>
  ) : (
    <div class="space-y-12">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6" id="stats-container"></div>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="subscriptions-grid"></div>
    </div>
  )}

  <script define:vars={{ subscriptions: subscriptions }}>
    // This script runs on the client-side to ensure real-time updates.

    // 格式化价格
    function formatPrice(price, currency) {
      const symbols = {
        'CNY': '¥',
        'USD': '$',
        'EUR': '€'
      };
      return `${symbols[currency] || currency} ${price}`;
    }

    // 格式化计费周期
    function formatBillingCycle(cycle) {
      const cycles = {
        'monthly': '月付',
        'yearly': '年付',
        'quarterly': '季付',
        'weekly': '周付'
      };
      return cycles[cycle] || cycle;
    }

    // 计算到期状态的函数
    function getExpiryStatus(nextBillingDate) {
      const now = new Date();
      const nextBilling = new Date(nextBillingDate);
      const diffTime = nextBilling.getTime() - now.getTime();
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

      if (diffDays < 0) {
        return { status: 'expired', days: Math.abs(diffDays), text: `已过期 ${Math.abs(diffDays)} 天`, icon: '⚠️' };
      } else if (diffDays === 0) {
        return { status: 'today', days: 0, text: '今天到期', icon: '🔥' };
      } else if (diffDays <= 3) {
        return { status: 'warning', days: diffDays, text: `${diffDays} 天后到期`, icon: '⏰' };
      } else if (diffDays <= 7) {
        return { status: 'caution', days: diffDays, text: `${diffDays} 天后到期`, icon: '📅' };
      } else {
        return { status: 'normal', days: diffDays, text: `${diffDays} 天后到期`, icon: '✅' };
      }
    }

    // 渲染统计概览
    function renderStats(stats) {
      const statsContainer = document.getElementById('stats-container');
      if (!statsContainer) return;

      statsContainer.innerHTML = `
        <div class="stats-card group">
          <div class="relative z-10">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-gradient-to-br from-liquid-primary to-liquid-secondary rounded-2xl flex items-center justify-center shadow-liquid">
                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
            </div>
            <div class="text-center">
              <p class="text-sm font-medium text-gray-600 mb-2">总订阅数</p>
              <p class="stats-number">${stats.total}</p>
              <p class="text-xs text-gray-500 mt-1">活跃服务</p>
            </div>
          </div>
        </div>
        <div class="stats-card group">
          <div class="relative z-10">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-gradient-to-br from-red-400 to-red-600 rounded-2xl flex items-center justify-center shadow-liquid">
                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
            </div>
            <div class="text-center">
              <p class="text-sm font-medium text-gray-600 mb-2">已过期</p>
              <p class="text-3xl font-bold bg-gradient-to-r from-red-500 to-red-600 bg-clip-text text-transparent">${stats.expired}</p>
              <p class="text-xs text-gray-500 mt-1">需要处理</p>
            </div>
          </div>
        </div>
        <div class="stats-card group">
          <div class="relative z-10">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-2xl flex items-center justify-center shadow-liquid">
                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
            <div class="text-center">
              <p class="text-sm font-medium text-gray-600 mb-2">即将到期</p>
              <p class="text-3xl font-bold bg-gradient-to-r from-yellow-500 to-orange-500 bg-clip-text text-transparent">${stats.warning}</p>
              <p class="text-xs text-gray-500 mt-1">需要关注</p>
            </div>
          </div>
        </div>
        <div class="stats-card group">
          <div class="relative z-10">
            <div class="flex items-center justify-center mb-4">
              <div class="w-16 h-16 bg-gradient-to-br from-green-400 to-emerald-600 rounded-2xl flex items-center justify-center shadow-liquid">
                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
              </div>
            </div>
            <div class="text-center">
              <p class="text-sm font-medium text-gray-600 mb-2">月度支出</p>
              <p class="text-3xl font-bold bg-gradient-to-r from-green-500 to-emerald-600 bg-clip-text text-transparent">¥${stats.monthlyTotal.toFixed(0)}</p>
              <p class="text-xs text-gray-500 mt-1">预估费用</p>
            </div>
          </div>
        </div>
      `;
    }

    // 渲染订阅列表
    function renderSubscriptions(sortedSubscriptions) {
      const grid = document.getElementById('subscriptions-grid');
      if (!grid) return;
      grid.innerHTML = sortedSubscriptions.map(subscription => {
        const { data, expiryStatus: status } = subscription;
        return `
          <div class="subscription-card status-${status.status} group" data-status="${status.status}">
            <div class="relative">
              <div class="mb-6">
                <div class="flex items-start space-x-4">
                  <div class="w-12 h-12 bg-gradient-to-br from-liquid-primary to-liquid-secondary rounded-xl flex items-center justify-center flex-shrink-0 shadow-liquid">
                    <span class="text-white font-bold text-lg">
                      ${data.title.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <div class="flex-1 min-w-0">
                    <h3 class="text-lg font-bold text-gray-900 mb-1 truncate">
                      ${data.title}
                    </h3>
                    <p class="text-sm text-gray-600 font-medium">${data.service}</p>
                  </div>
                </div>
              </div>

              <div class="mb-6">
                <div class="flex items-start space-x-4">
                  <div class="status-badge-${status.status} flex items-center space-x-2 px-3 py-2 rounded-xl shadow-lg backdrop-blur-sm">
                    <div class="w-2 h-2 rounded-full animate-pulse ${
                      status.status === 'expired' || status.status === 'today' ? 'bg-red-500' :
                      status.status === 'warning' ? 'bg-yellow-400' :
                      status.status === 'caution' ? 'bg-orange-400' :
                      'bg-green-400'
                    }" style="box-shadow: 0 0 8px ${
                      status.status === 'expired' || status.status === 'today' ? 'rgba(239, 68, 68, 0.6)' :
                      status.status === 'warning' ? 'rgba(251, 191, 36, 0.6)' :
                      status.status === 'caution' ? 'rgba(251, 146, 60, 0.6)' :
                      'rgba(52, 211, 153, 0.6)'
                    }"></div>
                    <span class="text-xs font-semibold tracking-wide">${status.text}</span>
                  </div>
                </div>
              </div>

              <div class="mb-6">
                <div class="glass-card p-4">
                  <div class="flex items-center justify-between mb-2">
                    <span class="text-sm text-gray-600">订阅费用</span>
                    <span class="text-lg font-bold gradient-text">
                      ${formatPrice(data.price, data.currency)}
                    </span>
                  </div>
                  <div class="flex items-center justify-between text-sm">
                    <span class="text-gray-500">计费周期</span>
                    <span class="text-gray-700 font-medium">${formatBillingCycle(data.billingCycle)}</span>
                  </div>
                </div>
              </div>

              <div class="mb-6">
                <div class="flex items-center space-x-3">
                  <div class="w-10 h-10 bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                  </div>
                  <div>
                    <p class="text-sm text-gray-600">下次扣费</p>
                    <p class="text-sm font-semibold text-gray-900">
                      ${new Date(data.nextBillingDate).toLocaleDateString('zh-CN')}
                    </p>
                  </div>
                </div>
              </div>

              ${(data.category || (data.tags && data.tags.length > 0)) ? `
                <div class="mb-6 space-y-3">
                  ${data.category ? `
                    <div class="flex items-center space-x-2">
                      <span class="text-xs text-gray-500">分类:</span>
                      <span class="px-2 py-1 bg-gradient-to-r from-liquid-primary/10 to-liquid-secondary/10 text-liquid-primary text-xs rounded-full font-medium">
                        ${data.category}
                      </span>
                    </div>
                  ` : ''}
                </div>
              ` : ''}

              <div class="flex space-x-3">
                ${data.website ? `
                  <a href="${data.website}" target="_blank" rel="noopener noreferrer" class="flex-1 liquid-btn text-center text-sm py-2">
                    <span>续费地址</span>
                  </a>
                ` : ''}
              </div>
            </div>
          </div>
        `;
      }).join('');
    }

    // 主渲染函数
    function renderAll() {
      if (subscriptions.length === 0) return;

      // 计算到期状态并排序
      const updatedSubscriptions = subscriptions.map(sub => ({
        ...sub,
        expiryStatus: getExpiryStatus(sub.data.nextBillingDate)
      }));
      const sortedSubscriptions = updatedSubscriptions.sort((a, b) => new Date(a.data.nextBillingDate).getTime() - new Date(b.data.nextBillingDate).getTime());

      // 计算统计数据
      const stats = {
        total: subscriptions.length,
        expired: sortedSubscriptions.filter(s => s.expiryStatus.status === 'expired').length,
        warning: sortedSubscriptions.filter(s => ['warning', 'today'].includes(s.expiryStatus.status)).length,
        normal: sortedSubscriptions.filter(s => s.expiryStatus.status === 'normal' || s.expiryStatus.status === 'caution').length,
        monthlyTotal: subscriptions.reduce((sum, sub) => {
          const monthlyPrice = sub.data.billingCycle === 'yearly' ? sub.data.price / 12 :
                             sub.data.billingCycle === 'quarterly' ? sub.data.price / 3 :
                             sub.data.billingCycle === 'weekly' ? sub.data.price * 4 :
                             sub.data.price;
          return sum + (sub.data.currency === 'CNY' ? monthlyPrice : monthlyPrice * 7.2);
        }, 0)
      };

      renderStats(stats);
      renderSubscriptions(sortedSubscriptions);
      initAnimations(); // Re-initialize animations after rendering
    }
    
    // 动画和事件绑定函数
    function initAnimations() {
      // Add a small delay to ensure elements are in the DOM
      setTimeout(() => {
        const filterButtons = document.querySelectorAll('.filter-btn');
        const subscriptionCards = document.querySelectorAll('.subscription-card');
        const statsCards = document.querySelectorAll('.stats-card');
        const buttons = document.querySelectorAll('.liquid-btn, .filter-btn');

        // 筛选功能
        filterButtons.forEach(button => {
          button.addEventListener('click', function() {
            filterButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');

            const filter = this.dataset.filter;
            subscriptionCards.forEach((card, index) => {
              const htmlCard = card;
              const status = htmlCard.dataset.status;
              let shouldShow = false;

              if (filter === 'all' || (filter === 'expired' && status === 'expired') || (filter === 'warning' && (status === 'warning' || status === 'today')) || (filter === 'normal' && (status === 'normal' || status === 'caution'))) {
                shouldShow = true;
              }

              if (shouldShow) {
                htmlCard.style.display = 'block';
                setTimeout(() => {
                  htmlCard.style.opacity = '1';
                  htmlCard.style.transform = 'translateY(0)';
                }, index * 50);
              } else {
                htmlCard.style.opacity = '0';
                htmlCard.style.transform = 'translateY(20px)';
                setTimeout(() => {
                  htmlCard.style.display = 'none';
                }, 300);
              }
            });
          });
        });

        // 初始化卡片动画
        subscriptionCards.forEach((card, index) => {
          const htmlCard = card;
          htmlCard.style.opacity = '0';
          htmlCard.style.transform = 'translateY(20px)';
          htmlCard.style.transition = 'all 0.3s ease';
          setTimeout(() => {
            htmlCard.style.opacity = '1';
            htmlCard.style.transform = 'translateY(0)';
          }, index * 100);
        });

        // 添加鼠标跟踪效果
        subscriptionCards.forEach(card => {
          const htmlCard = card;
          htmlCard.addEventListener('mousemove', function(e) {
            const rect = this.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            const centerX = rect.width / 2;
            const centerY = rect.height / 2;
            const rotateX = (y - centerY) / 20;
            const rotateY = (centerX - x) / 20;
            this.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(10px)`;
          });
          htmlCard.addEventListener('mouseleave', function() {
            this.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) translateZ(0px)';
          });
        });

        // 添加统计卡片的悬停效果
        statsCards.forEach((card, index) => {
          const htmlCard = card;
          htmlCard.style.opacity = '0';
          htmlCard.style.transform = 'translateY(30px)';
          htmlCard.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
          setTimeout(() => {
            htmlCard.style.opacity = '1';
            htmlCard.style.transform = 'translateY(0)';
          }, index * 150);
          htmlCard.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-8px) scale(1.02)';
          });
          htmlCard.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
          });
        });

        // 添加按钮点击波纹效果
        buttons.forEach(button => {
          const htmlButton = button;
          htmlButton.style.position = 'relative';
          htmlButton.style.overflow = 'hidden';
          htmlButton.addEventListener('click', function(e) {
            const mouseEvent = e;
            const ripple = document.createElement('span');
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = mouseEvent.clientX - rect.left - size / 2;
            const y = mouseEvent.clientY - rect.top - size / 2;
            ripple.style.width = ripple.style.height = size + 'px';
            ripple.style.left = x + 'px';
            ripple.style.top = y + 'px';
            ripple.classList.add('ripple');
            this.appendChild(ripple);
            setTimeout(() => {
              ripple.remove();
            }, 600);
          });
        });

        // 添加滚动视差效果
        window.addEventListener('scroll', () => {
          const scrolled = window.pageYOffset;
          const parallaxElements = document.querySelectorAll('.floating-element, .floating-element-delayed');
          parallaxElements.forEach((element, index) => {
            const htmlElement = element;
            const speed = 0.5 + (index * 0.1);
            const yPos = -(scrolled * speed);
            htmlElement.style.transform = `translateY(${yPos}px)`;
          });
        });
      }, 100);
    }

    // 页面加载时执行渲染
    document.addEventListener('DOMContentLoaded', renderAll);
    
    // 每小时重新计算一次，确保实时性
    setInterval(renderAll, 3600000);
  </script>
</Layout>